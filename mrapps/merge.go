package main

import (
	"strconv"
	"strings"

	"github.com/BWbwchen/MapReduce/worker"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func Map(filename string, contents string, ctx worker.MrContext) {
	for _, line := range strings.Split(strings.TrimRight(contents, "\n"), "\n") {
		words := strings.Split(line, " ")
		ctx.EmitIntermediate(words[0], words[1])
	}
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func Reduce(key string, values []string, ctx worker.MrContext) {
	// return the number of occurrences of this word.
	total := 0
	for _, s := range values {
		num, _ := strconv.Atoi(s)
		total += num
	}
	ctx.Emit(key, strconv.Itoa(total))
}
